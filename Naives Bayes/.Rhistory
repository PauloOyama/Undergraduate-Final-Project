setwd("A:/Universidade/TCC/Implementação/Naives Bayes")
df = read.csv("data/spam_or_not_spam.csv")
set.seed(2)
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train  <- df[sample, ]
test   <- df[!sample, ]
train$label
train$label[train$label != 0 ]
length(train$label[train$label != 0 ])
length(train$label[train$label != 0 ])
spam = length(train$label[train$label != 0])
not_spam = length(train$label) - spam
spam
train[0]
train$email[0]
train[1,1]
train[1,2]
strsplit(train[1,1],"[[:space:]]")
strsplit(train[1,1],"[[:space:]]")
duplicated(strsplit(train[1,1],"[[:space:]]"))
strsplit(train[1,1],"[[:space:]]")
strsplit(train[1,1],"[[:space:]]")[1]
strsplit(train[1,1],"[[:space:]]")[[1]
]
duplicated(strsplit(train[1,1],"[[:space:]]")[[1]])
train$email[1,1][duplicated(strsplit(train[1,1],"[[:space:]]")[[1]])]
strsplit(train[1,1],"[[:space:]]")[duplicated(strsplit(train[1,1],"[[:space:]]")[[1]])]
duplicated(strsplit(train[1,1],"[[:space:]]")[[1]])
strsplit(train[1,1],"[[:space:]]")
duplicated(strsplit(train[1,1],"[[:space:]]")[[1]])
duplicated(strsplit(train[1,1],"[[:space:]]")[[1]])
strsplit(train[1,1],"[[:space:]]")[duplicated(strsplit(train[1,1],"[[:space:]]")[[1]]) ]
strsplit(train[1,1],"[[:space:]]")[duplicated(strsplit(train[1,1],"[[:space:]]")[[1]])]
strsplit(train[1,1],"[[:space:]]")
strsplit(train[1,1],"[[:space:]]")[1]
strsplit(train[1,1],"[[:space:]]")[[1]
]
strsplit(train[1,1],"[[:space:]]")[[1]][2]
strsplit(train[1,1],"[[:space:]]")[[1]]
strsplit(train[1,1],"[[:space:]]")[[1]][duplicated(strsplit(train[1,1],"[[:space:]]")[[1]]) ]
strsplit(train[2,1],"[[:space:]]")[[1]][duplicated(strsplit(train[2,1],"[[:space:]]")[[1]]) ]
strsplit(train[2,1],"[[:space:]]")[[1]][duplicated(strsplit(train[2,1],"[[:space:]]")[[1]]) ]
strsplit(train[1,1],"[[:space:]]")[[1]][duplicated(strsplit(train[1,1],"[[:space:]]")[[1]]) ]
strsplit(train[1,1],"[[:space:]]")[[1]][!duplicated(strsplit(train[1,1],"[[:space:]]")[[1]]) ]
strsplit(train[1,1],"[[:space:]]")[[1]][!duplicated(strsplit(train[1,1],"[[:space:]]")[[1]]) ]
strsplit(train[1,1],"[[:space:]]")[[1]][!duplicated(strsplit(train[1,1],"[[:space:]]")[[1]]) ]
nrow(train)
for (i in 1:nrow(train)){
#find duplicated values
words_dup = duplicated(strsplit(train[i,1],"[[:space:]]")[[1]])
#take the distinct value
words = strsplit(train[i,1],"[[:space:]]")[[1]][words_dup]
}
words
train[2077,1]
#take the distinct value
words = strsplit(train[i,1],"[[:space:]]")[[1]][!words_dup]
words
df <- data.frame(c(""),c(0),c(0))
df
df <- data.frame(words=c(""),spam=c(0),ham=c(0))
df
df2 <- data.frame(words=c(""),spam=c(0),ham=c(0))
setwd("A:/Universidade/TCC/Implementação/Naives Bayes")
df = read.csv("data/spam_or_not_spam.csv")
set.seed(2)
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train  <- df[sample, ]
test   <- df[!sample, ]
spam = length(train$label[train$label != 0])
not_spam = length(train$label) - spam
df2 <- data.frame(words=c(""),spam=c(0),ham=c(0))
length(df2)
nrow(df2)
df2$words[df2$words == words[j]]
df2$words[df2$words == words[1]]
df2$words[df2$words == words[2]]
df2$words[df2$words == words[3]]
df2$words[df2$words == words[1]]
df2$words[df2$words == words[2]]
df2$words == words[2]
"" %in% df2$words
"a" %in% df2$words
df["words"]
df2["words"]
df["labels"]
df["label"]
clear
cls
df2$spam[df2$words == ""] = 1
df2
train[1,2]
df2$spam[df2$words == ""] += 1
df2$spam[df2$words == ""] = df2$spam[df2$words == ""] + 1
df2
df2$spam[df2$words == ""] = 0
df2
df2$spam[df2$words == ""] = df2$spam[df2$words == ""] + 1
df2
df2$spam[df2$words == ""] = 0
df2[nrow(df2)+1,] = c("Nao sei",1,0)
df2
df2 <- df2[-2]
df2
df2 <- df2[-2,]
df2
df2 <- data.frame(words=c(""),spam=c(0),ham=c(0))
df2
df2[nrow(df2)+1,1] = c("Nao sei")
df2
df = read.csv("data/spam_or_not_spam.csv")
set.seed(2)
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train  <- df[sample, ]
test   <- df[!sample, ]
spam = length(train$label[train$label != 0])
not_spam = length(train$label) - spam
df2 <- data.frame(words=c(""),spam=c(0),ham=c(0))
for (i in 1:nrow(train)){
#find duplicated values
words_dup = duplicated(strsplit(train[i,1],"[[:space:]]")[[1]])
#take the distinct value
words = strsplit(train[i,1],"[[:space:]]")[[1]][!words_dup]
for (j in 1:length(words)){
if(words[j] %in% df2$words){
if(train[i,2] == 0){
df2$ham[df2$words == words[j]] = df2$ham[df2$words == words[j]] + 1
}else{
df2$spam[df2$words == words[j]] = df2$spam[df2$words == words[j]] + 1
}
}else{
df2[nrow(df2)+1,1] = c(words[j])
if(train[i,2] == 0){
df2[nrow(df2)+1,2] = c(0)
df2[nrow(df2)+1,3] = c(1)
}else{
df2[nrow(df2)+1,2] = c(1)
df2[nrow(df2)+1,3] = c(1)
}
}
}
}
df2
x = "AA"
df2[nrow(df2)+1,1] = c(x)
df2
setwd("A:/Universidade/TCC/Implementação/Naives Bayes")
df = read.csv("data/spam_or_not_spam.csv")
set.seed(2)
sample <- sample(c(TRUE, FALSE), nrow(df), replace=TRUE, prob=c(0.7,0.3))
train  <- df[sample, ]
test   <- df[!sample, ]
spam = length(train$label[train$label != 0])
not_spam = length(train$label) - spam
df2 <- data.frame(words=c(""),spam=c(0),ham=c(0))
for (i in 1:nrow(train)){
#find duplicated values
words_dup = duplicated(strsplit(train[i,1],"[[:space:]]")[[1]])
#take the distinct value
words = strsplit(train[i,1],"[[:space:]]")[[1]][!words_dup]
for (j in 1:length(words)){
if(words[j] %in% df2$words){
if(train[i,2] == 0){
df2$ham[df2$words == words[j]] = df2$ham[df2$words == words[j]] + 1
}else{
df2$spam[df2$words == words[j]] = df2$spam[df2$words == words[j]] + 1
}
}else{
df2[nrow(df2)+1,1] = c(words[j])
if(train[i,2] == 0){
df2[nrow(df2),2] = c(0)
df2[nrow(df2),3] = c(1)
}else{
df2[nrow(df2),2] = c(1)
df2[nrow(df2),3] = c(1)
}
}
}
}
df2
for (j in 1:length(words)){
j
if(words[j] %in% df2$words){
if(train[i,2] == 0){
df2$ham[df2$words == words[j]] = df2$ham[df2$words == words[j]] + 1
}else{
df2$spam[df2$words == words[j]] = df2$spam[df2$words == words[j]] + 1
}
}else{
df2[nrow(df2)+1,1] = c(words[j])
if(train[i,2] == 0){
df2[nrow(df2),2] = c(0)
df2[nrow(df2),3] = c(1)
}else{
df2[nrow(df2),2] = c(1)
df2[nrow(df2),3] = c(1)
}
}
}
for (j in 1:length(words)){
j
if(words[j] %in% df2$words){
if(train[i,2] == 0){
df2$ham[df2$words == words[j]] = df2$ham[df2$words == words[j]] + 1
}else{
df2$spam[df2$words == words[j]] = df2$spam[df2$words == words[j]] + 1
}
}else{
df2[nrow(df2)+1,1] = c(words[j])
if(train[i,2] == 0){
df2[nrow(df2),2] = c(0)
df2[nrow(df2),3] = c(1)
}else{
df2[nrow(df2),2] = c(1)
df2[nrow(df2),3] = c(1)
}
}
}
for (j in 1:length(words)){
if(words[j] %in% df2$words){
if(train[i,2] == 0){
df2$ham[df2$words == words[j]] = df2$ham[df2$words == words[j]] + 1
}else{
df2$spam[df2$words == words[j]] = df2$spam[df2$words == words[j]] + 1
}
}else{
df2[nrow(df2)+1,1] = c(words[j])
if(train[i,2] == 0){
df2[nrow(df2),2] = c(0)
df2[nrow(df2),3] = c(1)
}else{
df2[nrow(df2),2] = c(1)
df2[nrow(df2),3] = c(1)
}
}
}
df2
df2 <- data.frame(words=c(""),spam=c(0),ham=c(0))
for (i in 1:nrow(train)){
#find duplicated values
words_dup = duplicated(strsplit(train[i,1],"[[:space:]]")[[1]])
#take the distinct value
words = strsplit(train[i,1],"[[:space:]]")[[1]][!words_dup]
for (j in 1:length(words)){
if(words[j] %in% df2$words){
if(train[i,2] == 0){
df2$ham[df2$words == words[j]] = df2$ham[df2$words == words[j]] + 1
}else{
df2$spam[df2$words == words[j]] = df2$spam[df2$words == words[j]] + 1
}
}else{
df2[nrow(df2)+1,1] = c(words[j])
if(train[i,2] == 0){
df2[nrow(df2),2] = c(0)
df2[nrow(df2),3] = c(1)
}else{
df2[nrow(df2),2] = c(1)
df2[nrow(df2),3] = c(1)
}
}
}
}
train[2054,1]
train[2055,1]
duplicated(strsplit(train[2054,1],"[[:space:]]")[[1]])
continue
rm(df2)
df2 <- data.frame(words=c(""),spam=c(0),ham=c(0))
for (i in 1:nrow(train)){
if(train[i,1] == ""){
next
}
#find duplicated values
words_dup = duplicated(strsplit(train[i,1],"[[:space:]]")[[1]])
#take the distinct value
words = strsplit(train[i,1],"[[:space:]]")[[1]][!words_dup]
for (j in 1:length(words)){
if(words[j] %in% df2$words){
if(train[i,2] == 0){
df2$ham[df2$words == words[j]] = df2$ham[df2$words == words[j]] + 1
}else{
df2$spam[df2$words == words[j]] = df2$spam[df2$words == words[j]] + 1
}
}else{
df2[nrow(df2)+1,1] = c(words[j])
if(train[i,2] == 0){
df2[nrow(df2),2] = c(0)
df2[nrow(df2),3] = c(1)
}else{
df2[nrow(df2),2] = c(1)
df2[nrow(df2),3] = c(1)
}
}
}
}
df2
train[1,1]
duplicated(strsplit(train[1,1],"[[:space:]]")[[1]])
strsplit(train[i,1],"[[:space:]]")[[1]][!duplicated(strsplit(train[1,1],"[[:space:]]")[[1]])]
strsplit(train[1,1],"[[:space:]]")[[1]][!duplicated(strsplit(train[1,1],"[[:space:]]")[[1]])]
df2["NUMBER"]
df2$words["NUMBER"]
df2
1/not_spam
df2$spam[1,]
df2$spam[]
df2$spam[1]
for(i in nrow(df2)){
df2$spam[i] = df2$spam[i]/spam
df2$ham[i] = df2$ham[i]/not_spam
}
df2
df2
df2$spam[1]
df2$spam[1] = df2$spam[1]/spam
df2$spam[1]
spam
for(i in nrow(df2)){
df2$spam[i] = df2$spam[i]/spam
df2$ham[i] = df2$ham[i]/not_spam
}
df2
spam
df2$spam[2] = df2$spam[2]/spam
df2
for(i in nrow(df2)){
df2$spam[i] = df2$spam[i]/spam
df2$ham[i] = df2$ham[i]/not_spam
}
df2$spam[i] = df2$spam[i]/spam
df2$spam[2] = df2$spam[2]/spamdf2
df2
i
nrow(df2)
for(i in nrow(df2)){
df2$spam[i] = df2$spam[i]/spam
df2$ham[i] = df2$ham[i]/not_spam
}
df2
df2
for(i in nrow(df2)){
df2$spam[i] = df2$spam[i]/spam
df2$ham[i] = df2$ham[i]/not_spam
}
df2
for(i in nrow(df2)){
df2$spam[i] = df2$spam[i]/spam
df2$ham[i] = df2$ham[i]/not_spam
}
rm(i)
for(i in nrow(df2)){
df2$spam[i] = df2$spam[i]/spam
df2$ham[i] = df2$ham[i]/not_spam
}
df2
rm(i)
for(i in nrow(df2)){
df2$spam[i] = df2$spam[i]/spam
df2$ham[i] = df2$ham[i]/not_spam
}
rm(i)
for(i in nrow(df2)){
df2$spam[i]
df2$spam[i] = df2$spam[i]/spam
df2$ham[i] = df2$ham[i]/not_spam
}
rm(i)
for(i in 1:nrow(df2)){
df2$spam[i] = df2$spam[i]/spam
df2$ham[i] = df2$ham[i]/not_spam
}
df2
nrow(df2)
nrow(df2$spam)
